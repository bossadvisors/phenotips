<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>PanelsDisplay</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1480524466000</creationDate>
  <parent>PhenoTips.PatientSheet</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1480615212000</date>
  <contentUpdateDate>1480533935000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>PhenoTips.PanelsDisplay</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>83165d91-a3fd-47e6-bdb0-dceef275f8e8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.PanelsDisplay = Class.create({
    'url' : '',
    'baseUrl' : '',
    'presentTerms' : [],
    'absentTerms' : [],
    'resultsToShow' : 10,
    'presentParamLabel' : 'present-term',
    'absentParamLabel' : 'absent-term',

    /**
     * Generates results for the first page based on new data provided.
     * @param parameters the query parameters. Supported parameters are as follows:
     *        "symptom" the symptoms that were found to be present.
     *        "not_symptom" the symptoms that were found to be absent.
     * @param resultsToShow the number of results to show; uses the default value if null
     */
    paginate : function(parameters, resultsToShow) {
      this.presentTerms = [];
      this.absentTerms = [];
      this.resultsToShow = resultsToShow || this.resultsToShow;
      this.updateLiveTable(parameters);
    },

    /**
     * Prompts redrawing of the LiveTable, by providing a new url with the updated parameters.
     * @param parameters the query parameters. Supported parameters are as follows:
     *        "symptom" the symptoms that were found to be present.
     *        "not_symptom" the symptoms that were found to be absent.
     */
    updateLiveTable : function(parameters) {
      var newUrl = this.buildNewUrl(parameters);
      if (newUrl != this.url) {
        this.url = newUrl;
        this.service.target.__hiddenParent &amp;&amp; this.service.target.__hiddenParent.removeClassName('hidden');
        if (this.table) {
          this.table.updateBaseUrl(this.url);
        } else {
          var options = {'limit' : this.resultsToShow};
          this.table = new XWiki.widgets.LiveTable(this.url, 'panels-livetable', this.buildRow.bind(this), options);
        }
      }
    },

    buildNewUrl : function(parameters) {
      var newUrl = this.baseUrl;
      if (parameters) {
        this.presentTerms = parameters.symptom;
        this.absentTerms = parameters.not_symptom;
        var presentParams = (this.presentTerms &amp;&amp; (this.presentParamLabel + '='
          + this.presentTerms.join('&amp;' + this.presentParamLabel + '='))) || '';
        var absentParams = (this.absentTerms &amp;&amp; (this.absentParamLabel + '='
          + this.absentTerms.join('&amp;' + this.absentParamLabel + '='))) || '';
        newUrl += '?' + presentParams + absentParams;
      }
      return newUrl;
    },

    /**
     * Builds a LiveTable row from the provided {@code geneObj json}.
     */
    buildRow : function(geneObj, idx, table) {
      var geneNode = this.makeGeneNode(geneObj);
      var listNode = new Element('ul');
      listNode.insert(geneNode);
      var rowElem = new Element('td')
        .insert(listNode)
      return new Element('tr').insert(rowElem);
    },

    makeGeneNode : function(geneObj) {
      var geneName = geneObj.gene_symbol;
      var geneId = geneObj.gene_id;
      var terms = geneObj.terms;
      var count = geneObj.count;
      var associatedFeaturesElem = new Element('dl', {'class' : 'gene-panels-row-features'})
        .insert(new Element('dt').insert(this.getFeatureNames(terms)));
      var associatedFeatureIDsElem = new Element('span', {'class' : 'gene-panels-row-feature-ids hidden'})
        .insert(this.getFeatureIDs(terms));
      var geneSymbolElem = new Element('span', {'class' : 'gene-symbol', 'title' : geneName})
        .insert(geneName);
      var geneIdElem = new Element('span', {'class' : 'gene-id hidden'})
        .insert(geneId);
      var countElem = new Element('span', {'class' : 'gene-count hidden'})
        .insert(count);
      var geneNode = new Element('li', {'class' : 'gene-panels-row'})
        .insert(geneSymbolElem)
        .insert(geneIdElem)
        .insert(countElem);

      if (typeof(this.service.tooltip) != 'undefined') {
        var icon = new Element('span', {'class' : 'xHelpButton fa fa-info-circle ' + this.service.tooltip, 'title' : geneName});
        new PhenoTips.widgets.HelpButton(icon);
        geneNode.insert(icon);
      }

      geneNode.insert(associatedFeaturesElem);
      geneNode.insert(associatedFeatureIDsElem);
      return geneNode;
    },

    /**
     * Retrieves the features' names.
     * @param terms a list of term objects
     * @return {string} a list of features' names as a semicolon separated string
     */
    getFeatureNames : function(terms) {
      return terms.map(function(term) {
        return term["name_translated"] || term.name;
      }).join("; ");
    },

    /**
     * Retrieves the features' HPO IDs.
     * @param terms a list of term objects
     * @return {string} a list of HPO IDs as a semicolon separated string
     */
    getFeatureIDs : function(terms) {
      return terms.map(function(term) {
        return term.id;
      }).join("; ");
    },

    /**
     * Creates the containers for displaying the results.
     */
    createResultsContainers : function() {
      this.attachDownloadListeners();
      this.attachChangeListeners();
    },

    attachChangeListeners : function() {
      var _this = this;
      document.on("xwiki:livetable:panels-livetable:loadingComplete", function(event) {
        if (event.memo &amp;&amp; event.memo.status &amp;&amp; event.memo.status != 200) {
          _this.table.clearDisplay();
          _this.table.clearCache();
          _this.service.target.__hiddenParent &amp;&amp; _this.service.target.__hiddenParent.addClassName('hidden');
        }
      });
    },

    attachDownloadListeners : function() {
      var _this = this;
      this.saveButton &amp;&amp; this.saveButton.observe('click', function(event) {
        event.stop();
        var parameters = {};
        parameters[_this.presentParamLabel] = _this.presentTerms || [];
        parameters[_this.absentParamLabel] = _this.absentTerms || [];
        Event.fire(document, 'panels:export:requested', {'param' : parameters, 'service' : _this.service});
      });
    },

    extendLiveTable : function() {
      XWiki.widgets &amp;&amp; XWiki.widgets.LiveTable &amp;&amp; XWiki.widgets.LiveTable.addMethods({
        updateBaseUrl : function(newBaseUrl) {
          this.clearCache();
          this.getUrl = newBaseUrl;
          this.showRows(1, this.limit, null);
        }
      });
    },

    /**
     * Creates the results containers inside of the specified parent container.
     *
     * @param service the search service linking to all the relevant data objects
     * @param saveButton for the data
     */
    initialize : function(service, saveButton) {
      if (!service) {return;}
      this.extendLiveTable();
      this.service = service;
      this.baseUrl = service.script + "/livetable";
      this.saveButton = saveButton;
      this.createResultsContainers();
    }
  });
  return PhenoTips;
}(PhenoTips || {}));
</code>
    </property>
    <property>
      <name>Gene panels paginated display of data</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.PanelsDisplay</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>21f274de-6339-4c80-ab4e-4970d98a24d9</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
#panels-livetable {
  width: 100%;
}

#panels-livetable .xwiki-livetable-display-container td {
  text-align: left;
}

#panels-livetable tbody.xwiki-livetable-display-body tr:hover,
#panels-livetable tbody.xwiki-livetable-display-body tr.rowHover {
  background-color: $theme.backgroundSecondaryColor;
}

#panels-livetable input.button,
#panels-livetable .buttonwrapper button, .buttonwrapper a:visited,
#panels-livetable .buttonwrapper a:link, .buttonwrapper a:active {
  color: $theme.buttonPrimaryTextColor !important;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Gene panels paginated data display styles</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
